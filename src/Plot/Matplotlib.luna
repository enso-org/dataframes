import Std.Foreign.C.Value
import Std.Foreign
import Std.Base

import Dataframes.Column
import Dataframes.Table

class Matplotlib:
    def call n ret args:
        lookupSymbol "DataframePlotter" n . call ret args

    def histogram data bins params:
        self.call "histogram" None [data.toCArg, CInt.fromInt bins . toCArg]

    def plotDate s1 s2: 
        self.call "plot_date" None [s1.toCArg, s2.toCArg]
    
    def scatter s1 s2: 
        self.call "scatter" None [s1.toCArg, s2.toCArg]

    def plot s1 s2 style label:
        cstr = CString.fromText style
        lbl = case label of 
            Nothing: CString.null 
            Just t: CString.fromText t
        self.call "plot" None [s1.toCArg, s2.toCArg, lbl.toCArg, cstr.toCArg]

    def kdeplot2 s1 s2 style:
        cstr = CString.fromText style
        self.call "kdeplot2" None [s1.toCArg, s2.toCArg, cstr.toCArg]

    def heatmap s1 style annot:
        annotc = case annot of
            Nothing: CString.null
            Just t: CString.fromText t
        cstr = CString.fromText style
        self.call "heatmap" None [s1.toCArg, cstr.toCArg, annotc.toCArg]

    def kdeplot s label:
        cstr = case label of
            Nothing: CString.null
            Just t: CString.fromText t
        self.call "kdeplot" None [s.toCArg, cstr.toCArg]

    def subplot nrows ncols iplot:
        self.call "subplot" None [CLong.fromInt nrows . toCArg, CLong.fromInt ncols . toCArg, CLong.fromInt iplot . toCArg]

    def init w h:
        self.call "init" None [CSize.fromInt w . toCArg, CSize.fromInt h . toCArg]

    def getPNG:
        cstr = self.call "getPNG" CString []
        case cstr.isNull of
            True: throw "Matplotlib: getPNG call failed."
            False:
                t = cstr.toText
                cstr.free
                t

class Chart:
    render :: None

    def appendVertical list:
        plotsList = list.map (x: x.toChart) 
        n = plotsList.length
        elems = 1.upto n
        zipped = plotsList.zip elems
        seqRend = zipped.map (x: 
            Matplotlib.subplot n 1 (x.second) 
            x.first . render)
        Chart seqRend.sequence

    def + that:
        def seqRend:
            self.render
            that.render
        Chart seqRend

    def renderPNG w h:
        Matplotlib.init w h
        self.render
        Matplotlib.getPNG

    def makeDataUrl t: "data:image/png;base64," + t

    def toJSON:
        small = self.renderPNG 400 400
        big   = self.renderPNG 800 800
        JSON.empty.insert "small" (self.makeDataUrl small) . insert "big" (self.makeDataUrl big)

class Histogram:
    data :: Column
    bins :: Int
    options :: Map Text Text

    def render:
        Matplotlib.histogram self.data.ptr.data.ptr self.bins self.options

    def toChart: Chart self.render

    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setBins b: self.bins = b

class PlotDate:
    series1 :: Column
    series2 :: Column

    def render: 
        Matplotlib.plotDate self.series1.ptr.data.ptr self.series2.ptr.data.ptr
    
    def toChart: Chart self.render 

    def + that: self.toChart.+that 

    def toJSON: self.toChart.toJSON

class Scatter:
    series1 :: Column
    series2 :: Column

    def render: 
        Matplotlib.scatter self.series1.ptr.data.ptr self.series2.ptr.data.ptr
    
    def toChart: Chart self.render 

    def + that: self.toChart.+that 

    def toJSON: self.toChart.toJSON

class Plot:
    series1 :: Column
    series2 :: Column
    style :: Text
    label :: Maybe Text

    def render:
        Matplotlib.plot self.series1.ptr.data.ptr self.series2.ptr.data.ptr self.style self.label

    def toChart: Chart self.render

    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setStyle s: self.style = s

    def setLabel l: self.label = (Just l)

class KDE2:
    series1 :: Column
    series2 :: Column
    colorMap :: Text

    def render:
        Matplotlib.kdeplot2 self.series1.ptr.data.ptr self.series2.ptr.data.ptr self.colorMap

    def toChart: Chart self.render

    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setColorMap s: self.colorMap = s

class KDE:
    data :: Column
    label :: Maybe Text

    def render:
        Matplotlib.kdeplot self.data.ptr.data.ptr self.label

    def toChart: Chart self.render

    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setLabel l: self.label = (Just l)

class Grid:
    data :: List (List Chart)

    def render:
        Matplotlib.kdeplot self.data.ptr.data.ptr self.label

    def toChart: Chart self.render

    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setLabel l: self.label = (Just l)
