import Std.Foreign.C.Value
import Std.Foreign
import Std.Base

import Dataframes.Column
import Dataframes.Internal.Utils
import Dataframes.Table

class Matplotlib:
    def libraryName: "DataframePlotter"

    def call n ret args:
        lookupSymbol self.libraryName n . call ret args

    def callHandlingError n ret args:
        callLibHandlingError self.libraryName n ret args

    def histogram data bins params:
        self.callHandlingError "histogram" None [data.toCArg, CInt.fromInt bins . toCArg]

    def plotDate s1 s2:
        self.callHandlingError "plotDate" None [s1.toCArg, s2.toCArg]

    def scatter s1 s2:
        self.callHandlingError "scatter" None [s1.toCArg, s2.toCArg]

    def plot s1 s2 style label color alpha:
        CString.with style styleC:
            CString.with (label.withDefault "") labelC:
                CString.with (color.withDefault "") colorC:
                    self.callHandlingError "plot" None [s1.toCArg, s2.toCArg, labelC.toCArg, styleC.toCArg, colorC.toCArg, CDouble.fromReal (alpha.withDefault 1.0) . toCArg]

    def kdeplot s label:
        CString.with (label.withDefault "") labelC:
            self.callHandlingError "kdeplot" None [s.toCArg, labelC.toCArg]

    def kdeplot2 s1 s2 style:
        CString.with style styleC:
            self.callHandlingError "kdeplot2" None [s1.toCArg, s2.toCArg, styleC.toCArg]

    def heatmap s1 style annot:
        CString.with (annot.withDefault "") annotC:
            CString.with style styleC:
                self.callHandlingError "heatmap" None [s1.toCArg, styleC.toCArg, annotC.toCArg]

    def fillBetween s1 s2 s3 label color alpha:
        CString.with (label.withDefault "") labelC:
            CString.with (color.withDefault "") colorC:
                self.callHandlingError "fillBetween" None [s1.toCArg, s2.toCArg, s3.toCArg, labelC.toCArg, colorC.toCArg, CDouble.fromReal (alpha.withDefault 1.0) . toCArg]

    def subplot nrows ncols iplot:
        self.callHandlingError "subplot" None [CLong.fromInt nrows . toCArg, CLong.fromInt ncols . toCArg, CLong.fromInt iplot . toCArg]

    def init w h:
        self.callHandlingError "init" None [CSize.fromInt w . toCArg, CSize.fromInt h . toCArg]

    def getPNG:
        result = self.callHandlingError "getPngBase64" CString []
        result.toText

class Chart:
    render :: None

    def verticalLayout list:
        plotsList = list.map (x: x.toChart)
        n = plotsList.length
        elems = 1.upto n
        zipped = plotsList.zip elems
        seqRend = zipped.map (x:
            Matplotlib.subplot n 1 (x.second)
            x.first . render)
        Chart seqRend.sequence

    def toChart: self

    def + that:
        def seqRend:
            self.render
            that.render
        Chart seqRend

    def renderPNG w h:
        Matplotlib.init w h
        self.render
        Matplotlib.getPNG

    def makeDataUrl t: "data:image/png;base64," + t

    def toJSON:
        small = self.renderPNG 400 400
        big   = self.renderPNG 800 800
        JSON.empty.insert "small" (self.makeDataUrl small) . insert "big" (self.makeDataUrl big)

class Subplot:
    def verticalLayout: Chart None . verticalLayout 

class Histogram:
    data :: Column
    bins :: Int
    options :: Map Text Text

    def render:
        Matplotlib.histogram self.data.ptr self.bins self.options

    def toChart: Chart self.render

    # Adds new plot to existing one.
    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    # Defines the number of equal-width bins in the given range (10, by default) for a histogram plot.
    #
    # > import Dataframes.Column
    # > import Dataframes.Types
    # > import Dataframes.Table
    # >
    # > def main:
    # >     l1 = l1 = [1,23,78,4,12,7,89,6,7,19,17,13,15,56,89,23,0,1,45,30]
    # >     col1 = Column.fromList "col1" Int64Type l1
    # >     table = Table.fromColumns [col1]
    # >     plot1 = table.chart.histogram "col1"
    # >     modifyBins = plot1.setBins 4
    # >     None
    #
    # `b`: Number of bins.
    #
    # `return`: Histogram plot with predefined number of bins.
    # TODO - prtscreen

    def setBins b: Histogram self.data b self.options

    # Creates a subplots arranged vertically.
    def verticalLayout: Chart None . verticalLayout

class PlotDate:
    series1 :: Column
    series2 :: Column

    def render:
        Matplotlib.plotDate self.series1.ptr self.series2.ptr

    def toChart: Chart self.render

    # Adds new plot to existing one.
    def + that: self.toChart.+that

    def toJSON: self.toChart.toJSON

    # Creates a subplots arranged vertically.
    def verticalLayout: Chart None . verticalLayout

class Scatter:
    series1 :: Column
    series2 :: Column

    def render:
        Matplotlib.scatter self.series1.ptr self.series2.ptr

    def toChart: Chart self.render

    # Adds new plot to existing one.
    def + that: self.toChart.+that

    def toJSON: self.toChart.toJSON

    # Creates a subplots arranged vertically.
    def verticalLayout: Chart None . verticalLayout

class Plot:
    series1 :: Column
    series2 :: Column
    style :: Text
    label :: Maybe Text
    color :: Maybe Text
    alpha :: Maybe Double

    def render:
        Matplotlib.plot self.series1.ptr self.series2.ptr self.style self.label self.color self.alpha

    def toChart: Chart self.render

    # Adds new plot to existing one.
    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setStyle s: Plot self.series1 self.series2 s self.label self.color self.alpha

    def setLabel l: Plot self.series1 self.series2 self.style (Just l) self.color self.alpha

    def setColor c: Plot self.series1 self.series2 self.style self.label (Just c) self.alpha

    def setAplha a: Plot self.series1 self.series2 self.style self.label self.color (Just a)

    # Creates a subplots arranged vertically.
    def verticalLayout: Chart None . verticalLayout

class FillBetween:
    series1 :: Column
    series2 :: Column
    series3 :: Column
    label :: Maybe Text
    color :: Maybe Text
    alpha :: Maybe Double

    def render:
        Matplotlib.fillBetween self.series1.ptr self.series2.ptr self.series3.ptr self.label self.color self.alpha

    def toChart: Chart self.render

    # Adds new plot to existing one.
    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setLabel l: FillBetween self.series1 self.series2 self.series3 (Just l) self.color self.alpha

    def setColor c: FillBetween self.series1 self.series2 self.series3 self.label (Just c) self.alpha

    def setAlpha a: FillBetween self.series1 self.series2 self.series3 self.label self.color (Just a)

    # Creates a subplots arranged vertically.
    def verticalLayout: Chart None . verticalLayout

class KDE2:
    series1 :: Column
    series2 :: Column
    colorMap :: Text

    def render:
        Matplotlib.kdeplot2 self.series1.ptr self.series2.ptr self.colorMap

    def toChart: Chart self.render

    # Adds new plot to existing one.
    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setColorMap s: KDE2 self.series1 self.series2 s

    # Creates a subplots arranged vertically.
    def verticalLayout: Chart None . verticalLayout

class KDE:
    data :: Column
    label :: Maybe Text

    def render:
        Matplotlib.kdeplot self.data.ptr self.label

    def toChart: Chart self.render

    # Adds new plot to existing one.
    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setLabel l: KDE self.data (Just l)

    # Creates a subplots arranged vertically.
    def verticalLayout: Chart None . verticalLayout

class Grid:
    data :: List (List Chart)

    def render:
        Matplotlib.kdeplot self.data.ptr.data.ptr self.label

    def toChart: Chart self.render

    # Adds new plot to existing one.
    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setLabel l: self.label = (Just l)

    # Creates a subplots arranged vertically.
    def verticalLayout: Chart None . verticalLayout
