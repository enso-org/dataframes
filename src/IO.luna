import Dataframes.Internal.CWrappers
import Dataframes.Internal.Utils
import Dataframes.Table
import Dataframes.IO.Options

import Std.Foreign
import Std.Foreign.C.Value

class ElementType:
    IntElement
    RealElement
    TextElement
    MaybeIntElement
    MaybeRealElement
    MaybeTextElement

    def toArrowId: case self of
        IntElement: 9
        RealElement: 12
        TextElement: 13
        MaybeIntElement: 9
        MaybeRealElement: 12
        MaybeTextElement: 13

    def nullable: case self of
        IntElement: False
        RealElement: False
        TextElement: False
        MaybeIntElement: True
        MaybeRealElement: True
        MaybeTextElement: True

    def toJSON: case self of
        IntElement: "IntElement".toJSON
        RealElement: "RealElement".toJSON
        TextElement: "TextElement".toJSON
        MaybeIntElement: "MaybeIntElement".toJSON
        MaybeRealElement: "MaybeRealElement".toJSON
        MaybeTextElement: "MaybeTextElement".toJSON


def listToMap list:
    def insert (k,v) m: m.insert k v
    list.foldLeft Map.empty insert

class CSVParser:
    CSVParser
    CustomizedCSVParser ColumnNamePolicy [ElementType]

    def namePolicy: case self of
        CSVParser: TakeFromFirstRow
        CustomizedCSVParser n _: n

    def typePolicy: case self of
        CSVParser: []
        CustomizedCSVParser _ m: m

    def useCustomNames names:
        CustomizedCSVParser (CustomNames names) self.typePolicy

    def useReadColumnNames:
        CustomizedCSVParser TakeFromFirstRow self.typePolicy

    def useGeneratedColumnNames:
        CustomizedCSVParser Generate self.typePolicy

    def setTypes columnTypes:
        CustomizedCSVParser self.namePolicy columnTypes

    def customNames: case self.namePolicy of
        CustomNames l: l
        _: []

    # Reads CSV file from the hard drive, returning a `Table` value.
    #
    # It is assumed thath first row contain column names. Column types will are deduced. If deduction fails the `Text` type will be applied.
    #
    # > import Dataframes.IO
    # >
    # > def main:
    # >     CSVParser.readFile $ Package.samples "Dataframes" / "simple_empty.csv"
    # >     None
    #
    # `filepath`: Path to the CSV file to read.
    #
    # `return`: `Table` value containing the data from CSV file.

    def readFile filepath:
        Table.fromWrapper $ callCsvParser (ParseCSVFile filepath) self.namePolicy self.typePolicy

    def readText text:
        Table.fromWrapper $ callCsvParser (ParseCSVContents text) self.namePolicy self.typePolicy

class XLSXParser:
    XLSXParser
    CustomizedXLSXParser ColumnNamePolicy [ElementType]

    def namePolicy: case self of
        XLSXParser: TakeFromFirstRow
        CustomizedXLSXParser n _: n

    def typePolicy: case self of
        XLSXParser: []
        CustomizedXLSXParser _ m: m

    def useCustomNames names:
        CustomizedXLSXParser (CustomNames names) self.typePolicy

    def useReadColumnNames:
        CustomizedXLSXParser TakeFromFirstRow self.typePolicy

    def useGeneratedColumnNames:
        CustomizedXLSXParser Generate self.typePolicy

    def setTypes columnTypes:
        CustomizedXLSXParser self.namePolicy columnTypes

    def customNames: case self.namePolicy of
        CustomNames l: l
        _: []

    def readFile filepath:
        Table.fromWrapper $ callCsvParser (ParseXLSXFile filepath) self.namePolicy self.typePolicy

class CSVGenerator:
    CSVGenerator
    CSVGeneratorCustomized GeneratorHeaderPolicy CSVGeneratorQuotingPolicy

    def headerPolicy: case self of
        CSVGenerator: WriteHeaderLine
        CSVGeneratorCustomized hp _: hp
    def quotingPolicy: case self of
        CSVGenerator: QuoteWhenNeeded
        CSVGeneratorCustomized _ qp: qp
    def setHeaderPolicy hp:
        CSVGeneratorCustomized hp self.quotingPolicy
    def setQuotingPolicy qp:
        CSVGeneratorCustomized self.headerPolicy qp

    def generateText table:
        callHandlingError "writeTableToCsvString" CString [table.ptr.ptr.toCArg, self.headerPolicy.toCArg, self.quotingPolicy.toCArg] . toText
    def writeFile path table:
        CString.with path pathC:
            callHandlingError "writeTableToCsvFile" None [pathC.toCArg, table.ptr.ptr.toCArg, self.headerPolicy.toCArg, self.quotingPolicy.toCArg] . toText


class XLSXGenerator:
    XLSXGenerator
    XLSXGeneratorCustomized GeneratorHeaderPolicy

    def headerPolicy: case self of
        XLSXGenerator: WriteHeaderLine
        XLSXGeneratorCustomized hp: hp
    def setHeaderPolicy hp:
        XLSXGeneratorCustomized hp
    def writeFile path table:
        CString.with path pathC:
            callHandlingError "writeTableToXLSXFile" CString [pathC.toCArg, table.ptr.ptr.toCArg, self.headerPolicy.toCArg] . toText

class FeatherParser:
    def readFile path:
        CString.with path pathC:
            wrapperPtr = callHandlingError "readTableFromFeatherFile" (Pointer None) [pathC.toCArg]
            wrapper = wrapReleasableResouce TableWrapper wrapperPtr
            Table.fromWrapper wrapper

class FeatherGenerator:
    def writeFile path table:
        CString.with path pathC:
            callHandlingError "writeTableToFeatherFile" None [pathC.toCArg, table.ptr.ptr.toCArg]