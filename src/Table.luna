import Dataframes.Column
import Dataframes.Schema
import Dataframes.Types
import Dataframes.Internal.CWrappers
import Dataframes.Plot.Matplotlib

import Std.Foreign.C.Value

class SortOrder:
    Ascending
    Descending

    def toCArg:
        i = case self of
            Ascending: 0
            Descending: 1
        CInt8.fromInt i

class NullPosition:
    NullsBefore
    NullsAfter

    def toCArg:
        i = case self of
            NullsBefore: 0
            NullsAfter: 1
        CInt8.fromInt i

# Note: keep in sync with C++ enum with the same name
class AggregateFunction:
    Minimum
    Maximum
    Mean
    Length
    Median
    First
    Last
    Sum
    RSI
    Std

    def toInt: case self of
        Minimum: 0
        Maximum: 1
        Mean: 2
        Length: 3
        Median: 4
        First: 5
        Last: 6
        Sum: 7
        RSI: 8
        Std: 9

class Table:
    Table
    TableVal (TableWrapper)

    def ptr:
        case self of
            TableVal ptr: ptr

    def fromWrapper wrapper:
        wrapper' = wrapper
        TableVal wrapper'
    def fromSchemaAndColumns schema columns:
        self.fromWrapper $ createTableWrapper schema.ptr (columns.each .ptr)
    def fromColumns columns:
        fields = columns.each .field
        ptrs = columns.each .ptr
        schema = Schema.fromFields fields
        self.fromWrapper $ createTableWrapper schema.ptr ptrs
    def fromFile path:
        self.fromWrapper $ readTableFromFile path

    def columnCount: self.ptr.columnCount
    def rowCount: self.ptr.rowCount
    def schema:
        wrapper = self.ptr.schema
        SchemaVal wrapper
    def columnAt index:
        columnWrapper = self.ptr.columnAt index
        Column.fromColumnWrapper columnWrapper
    def addColumn index column:
        self.fromWrapper $ self.ptr.addColumn index column.ptr
    def concat ts:
        cols = ts . each .toList . concat
        self.fromColumns cols
    def + that: Table.concat [self, that]
    def at name:
        self.columns [name]
    def setAt name column:
        cols = self.toList
        before = cols.takeWhile c: (c.name == name) . not
        after = cols.drop (before.length + 1)
        col = column.rename name
        columns = before + [col] + after
        self.fromColumns columns
    def column name:
        ix = self.schema.getFieldIndexByName name
        self.columnAt ix    
    def columns names:
        columns = names.each self.column
        self.fromColumns columns
    
    # removeColumn :: Int -> Table
    def removeColumn index:
        self.fromWrapper $ self.ptr.removeColumn index

    # remove :: Text -> Table
    def remove name:
        self.removeColumn $ self.schema.getFieldIndexByName name
    def toList:
        self.ptr.toList.each Column.fromColumnWrapper
    def toText:
        self.toList.toText
    def columnNames:
        self.toList.each .name
    def == that:
        self.ptr.equals that.ptr
    def slice beg count:
        cols = self.toList
        slicedCols = cols.each (_.slice beg count)
        self.fromColumns slicedCols
    def take count: self.slice 0 count
    def drop count:
        leftCount = self.rowCount - count
        self.slice count leftCount
    def toJSON:
        maxCount = 1000 / self.columnCount
        mc = if maxCount < 10 then 10 else maxCount
        rowCount = if self.rowCount < mc then self.rowCount else mc
        cols = self.toList
        columnValueLists = cols.each (_ . slice 0 rowCount . toList)
        JSON.empty . insert "header" self.columnNames . insert "data" columnValueLists
    def filter f:
        pred = f TableHandle
        self.fromWrapper $ self.ptr.filter pred
    def filterColumns pred:
        cols = self.toList
        filtered = cols.filter pred
        self.fromColumns filtered
    def eachColumn pred:
        cols = self.toList
        filtered = cols.each pred
        self.fromColumns filtered
    def each f:
        mapper = f TableHandle
        columnWrapper = self.ptr.eachToColumn "Result" mapper
        Column.fromColumnWrapper columnWrapper
    def eachTo name f:
        r = self.each f
        self.setAt name r

    # sortBy :: [(Column, SortOrder, NullPosition)]
    def sortByColumn sortBy:
        self.fromWrapper $ self.ptr.sort (sortBy.each (col, b, c): (col.ptr, b, c))
    # sortBy is list of triples: [(column name :: Text, SortOrder, NullPosition)]
    def sort sortBy:
        sortByColumns = sortBy.each (colName, order, pos): (self.column colName, order, pos)
        self.sortByColumn sortByColumns
    def dropNa:
        self.fromWrapper $ self.ptr.dropNa
    def dropNaAt columnName:
        self.fromWrapper $ self.ptr.dropNaByName columnName
    def fillNa valueToFillWith:
        self.fromWrapper $ self.ptr.fillNa valueToFillWith
    def fillNaAt columnName valueToFillWith:
        self.fromWrapper $ self.ptr.fillNaAt columnName valueToFillWith
    def interpolate:
        self.fromWrapper $ self.ptr.interpolate
    def toColumn:
        case self.toList of
            [c]: c
            t: throw $ "Table.toColumn: table must have exactly 1 column, but has " + t.length.toText

    def describeNa:
        cols = self.toList
        nrows = self.rowCount
        names = cols . each .name
        nullCounts = cols . each .nullCount
        nullRatios = nullCounts . each (_.toReal / nrows.toReal)
        namesCol      = Column.fromList "colname" StringType names
        nullCountsCol = Column.fromList "count"   Int64Type  nullCounts
        nullRatiosCol = Column.fromList "ratio"   DoubleType nullRatios
        self.fromColumns [namesCol, nullCountsCol, nullRatiosCol]

    def shortRep:
        "Table<" + self.columnCount.toText + "Ã—" + self.rowCount.toText + ">"

    def corr:
        self.fromWrapper $ self.ptr.corr

    # corrWith :: Text -> Table 
    def corrWith columnName:
        column = self.at columnName . toColumn
        corrCol = Column.fromColumnWrapper $ self.ptr.corrWith column.ptr
        colNames = self.toList . each .name
        corrList = corrCol.toList
        l1 = colNames . zip corrList
        sorted = l1.sortBy .second
        names = sorted.each .first
        vals  = sorted.each .second
        col1 = Column.fromList "column" StringType names
        col2 = Column.fromList ("CORR_WITH_" + columnName) DoubleType vals
        Table.fromColumns [col1, col2]

    # describeColumn :: Text -> Table 
    def describeColumn columnName:
        col = self.at columnName . toColumn
        min = col.min
        max = col.max
        mean = col.mean
        std = col.std
        quart1 = col.quantile 0.25
        median = col.median
        quart3 = col.quantile 0.75
        Table.fromColumns [mean, std, min, quart1, median, quart3, max]

    def countValues columnName:
        self.at columnName . toColumn . countValues

    # aggregateBy :: Text -> [(Text, [AggregateFunction])] -> Table
    def aggregateBy keyColumnName aggregations:
        keyColumnWrapper = self.column keyColumnName . ptr
        aggregationWithWrappers = aggregations.each (colname, aggrs): (self.column colname . ptr, aggrs.each .toInt)
        self.fromWrapper $ self.ptr.aggregateBy keyColumnWrapper aggregationWithWrappers

    # describe returns informations about whole table like standard deviation, minium, maximum, mean, median qunatile 0.25 and 0.75 for each column
    def describe:
        numerics = self.filterColumns .isNumeric
        names = numerics.columnNames 

        std = names.each (name: self.column name . std )
        stdVal = std.map .toList 
        stdFlatList = stdVal.concat

        min = names.each (name: self.column name . min )
        minVal = min.map .toList 
        minFlatList = minVal.concat

        max = names.each (name: self.column name . max )
        maxVal = max.map .toList 
        maxFlatList = maxVal.concat

        mean = names.each (name: self.column name . mean )
        meanVal = mean.map .toList 
        meanFlatList = meanVal.concat

        quart1 = names.each (name: self.column name . quantile 0.25 )
        quart1Val = quart1.map .toList 
        quart1FlatList = quart1Val.concat

        median = names.each (name: self.column name . median )
        medianVal = median.map .toList 
        medianFlatList = medianVal.concat

        quart3 = names.each (name: self.column name . quantile 0.75 )
        quart3Val = quart3.map .toList 
        quart3FlatList = quart3Val.concat

        col1 = Column.fromList "column" StringType names 
        col2 = Column.fromList "Mean" DoubleType meanFlatList 
        col3 = Column.fromList "Std dev" DoubleType stdFlatList 
        col4 = Column.fromList "Min" DoubleType minFlatList 
        col5 = Column.fromList "Quantile 0.25" DoubleType quart1FlatList 
        col6 = Column.fromList "Median" DoubleType medianFlatList 
        col7 = Column.fromList "Quantile 0.75" DoubleType quart3FlatList 
        col8 = Column.fromList "Max" DoubleType maxFlatList 
        Table.fromColumns [col1, col2, col3, col4, col5, col6, col7, col8]

    # rollingInterval :: Text -> TimeInterval -> [(Text, [AggregateFunction])] -> Table
    def rollingInterval keyColumnName interval aggregations:
        keyColumnWrapper = self.column keyColumnName . ptr
        aggregationWithWrappers = aggregations.each (colname, aggrs): (self.column colname . ptr, aggrs.each .toInt)
        self.fromWrapper $ self.ptr.rollingInterval keyColumnWrapper (interval.toMicroseconds * 1000) aggregationWithWrappers

    # shift :: Text -> Int -> Table
    def shift columnName periods:
        columnToShift = self.column columnName
        shiftedColumn = columnToShift.shift periods 
        newColumnname = columnName + "_shift_" + periods.toText
        newTable = self.setAt newColumnname shiftedColumn
        newTable

    def chart: ChartBuilder self

class ChartBuilder:
    table :: Table

    def plot cname1 cname2:
        c1 = self.table.at cname1 . toColumn
        c2 = self.table.at cname2 . toColumn
        Plot c1 c2 "o" Nothing

    def plotDate cname1 cname2: 
        c1 = self.table.at cname1 . toColumn
        c2 = self.table.at cname2 . toColumn
        PlotDate c1 c2

    def scatter cname1 cname2: 
        c1 = self.table.at cname1 . toColumn
        c2 = self.table.at cname2 . toColumn
        Scatter c1 c2

    def histogram cname:
        c = self.table.at cname . toColumn
        Histogram c 10 Map.empty

    def kde2 cname1 cname2:
        c1 = self.table.at cname1 . toColumn
        c2 = self.table.at cname2 . toColumn
        KDE2 c1 c2 "Blues_r"
    def kde cname:
        c = self.table.at cname . dropNa . toColumn
        KDE c Nothing

    def heatmap:
        Heatmap self.table "RdBu_r" Nothing

    def fillBetween cname1 cname2 cname3:
        c1 = self.table.at cname1 . toColumn
        c2 = self.table.at cname2 . toColumn
        c3 = self.table.at cname3 . toColumn
        FillBetween c1 c2 c3 

class Heatmap:
    data :: Table
    colorMap :: Text
    annotations :: Maybe Text

    def render:
        Matplotlib.heatmap self.data.ptr.ptr self.colorMap self.annotations

    def toChart: Chart self.render

    def + that:
        self.toChart.+ that

    def toJSON: self.toChart.toJSON

    def setColorMap s: self.colorMap = s
    def setAnnotations s: self.annotations = Just s
