import Dataframes.Internal.CWrappers
import Dataframes.Internal.ArrayBuilder

class Array a:
    Array a
    ArrayVal a ArrayWrapper

    def typeTag: case self of
        Array t: t
        ArrayVal t _: t

    def ptr: case self of
        ArrayVal _ ptr: ptr

    def fromWrapper wrapper:
        wrapper' = wrapper
        ArrayVal self.typeTag wrapper'

    def shortRep:case self of
        Array t: "Array"
        _: "Array<1x" + self.length.toText + ">"

    def fromList list:
        builder = ArrayBuilder self.typeTag . create
        builder.appendMany list
        self.fromWrapper builder.finish

    def data:
        self.ptr.data

    def length:
        self.ptr.length
    def valueAt index:
        isNull = self.typeTag.nullable.and (self.nullAt index)
        cval = self.ptr.value index self.typeTag.ctype self.typeTag.typename
        self.typeTag.fromC isNull cval
    def toList:
        0.upto (self.length - 1) . each (self.valueAt _)
    def toText:
        self.toList.toText
    def toJSON:
        self.toList.toJSON
    def nullAt index:
        self.ptr.nullAt index

    # NOTE: method is provisional and low-performance
    def mapSame f: self.map self.typeTag f

    # NOTE: method is provisional and low-performance
    def map typeTag f:
        Array typeTag . fromList $ self.toList.each f

    def slice fromIndex length:
        ptr = self.ptr.slice fromIndex length
        ArrayVal self.typeTag ptr
