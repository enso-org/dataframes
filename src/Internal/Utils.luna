import Std.Base
import Std.Foreign
import Std.Foreign.C.Value
import Std.Time

def lookupHelper fname:
    lookupSymbol "DataframeHelper" fname

def callHelper fname ret args:
    lookupHelper fname . call ret args

def benchmark desc act:
    t0 = Time.now
    a = act
    t1 = Time.now
    print ("Benchmarking: " + desc + ": " + (t1.diff t0).toText + " ms")
    a

def releaseMethod:
    lookupHelper "release"

def callLibHandlingError library fname ret args:
    Pointer CString . with err:
        symbol = lookupSymbol library fname
        result = symbol.call ret (args + [err.toCArg])
        case err.read.isNull of
            True:
                result
            False:
                errorMsg = err.read.toText
                throw errorMsg

def callHandlingError fname ret args:
    callLibHandlingError "DataframeHelper" fname ret args

def withCStringArray texts f:
    bracket (texts.each CString.fromText) (_.each .free) textsCStringList:
        Array CString . with textsCStringList f

def setHelperVerbosity isVerbose:
    callHelper "setVerbosity" None [CInt8.fromInt (if isVerbose then 1 else 0) . toCArg]

def wrapReleasableResouce f ptr:
    managedPtr = ManagedPointer None . fromPointer releaseMethod ptr
    f managedPtr