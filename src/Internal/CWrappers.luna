import Std.Foreign
import Std.Foreign.C.Value

import Dataframes.Internal.Utils
import Dataframes.IO.Options

class DataTypeWrapper:
    ptr :: ManagedPointer None

    def callSelf nameSuffix ret args:
        callHandlingError ("dataType" + nameSuffix) ret ([self.ptr.toCArg] + args)
    def name:
        self.callSelf "Name" CString [] . toText
    def toText:
        self.callSelf "ToString" CString [] . toText
    def typeId:
        self.callSelf "Id" CInt8 [] . toInt
    # warning: only fixed-width types support this operation
    # TODO: somehow enforce this on the type level
    def bitWidth:
        self.callSelf "FixedWidthTypeBitWidth" CInt32 [] . toInt

def createDataTypeWrapper typename:
    value = case typename of
                "Int32": 7
                "Int64": 9
                "Double": 12
                "String": 13
                "TimestampTag": 18
                _: throw $ "unknown typename " + typename
    ptr = callHandlingError "dataTypeNew" (Pointer None) [CInt8.fromInt value . toCArg]
    wrapReleasableResouce DataTypeWrapper ptr

# type-erased class that wraps an array builder for some type (identified by string)
class ArrayBuilderWrapper:
    ptr :: ManagedPtr None
    typename :: Text

    def toCArg:
        self.ptr.toCArg
    def selfCall fullNameSuffix ret args:
        callHandlingError ("builder" + fullNameSuffix) ret ([self.ptr.toCArg] + args)
    def typeCall nameSuffix ret args:
        self.selfCall (self.typename + nameSuffix) ret args

    # value should be a C-compatible value (type-erased base doesn't know what is the argument size)
    def append value:
        self.typeCall "AppendValue" None [value.toCArg]

    # NOTE: should not be called if builded array is expected to be null free
    # (rule should be enforced by owning code)
    # TODO: in future enforce by type system
    def appendNull:
        self.typeCall "AppendNull" None []

    # resize if needed
    def reserve count:
        self.typeCall "Reserve" None [CInt64.fromInt count . toCArg]

    def resize count:
        self.typeCall "Resize" None [CInt64.fromInt count . toCArg]

    def capacity:
        callHelper "builderCapacity" CInt64 [self.toCArg] . toInt
    def length:
        callHelper "builderLength" CInt64 [self.toCArg] . toInt

    #
    def finish:
        ptr = self.typeCall "Finish" (Pointer None) []
        wrapReleasableResouce ArrayWrapper ptr

    def type:
        ptr = self.selfCall "ObtainType" (Pointer None) []
        wrapReleasableResouce DataTypeWrapper ptr

class ArrayWrapper:
    ptr :: ManagedPointer None

    def length:
        callHelper "arrayLength" CInt64 [self.ptr.toCArg] . toInt

    def value index retType typename:
        callHandlingError ("array" + typename + "ValueAt") retType [self.ptr.toCArg, CInt64.fromInt index . toCArg]

    def data:
        ptr = callHandlingError ("arrayData") (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce ArrayDataWrapper ptr

    def nullAt index:
        ret = callHandlingError "arrayIsNullAt" CInt8 [self.ptr.toCArg, CInt64.fromInt index . toCArg] . toInt
        ret == 1

    def slice fromIndex length:
        ptr = callHandlingError "arraySlice" (Pointer None) [self.ptr.toCArg, CInt64.fromInt fromIndex . toCArg, CInt64.fromInt length . toCArg]
        wrapReleasableResouce ArrayWrapper ptr

class BufferWrapper:
    ptr :: ManagedPointer None

    def copyNFrom copyFromIndex copyLength:
        ptr = callHandlingError "bufferCopy" (Pointer None) [self.ptr.toCArg, CInt64.fromInt copyFromIndex . toCArg, CInt64.fromInt copyLength . toCArg]
        wrapReleasableResouce BufferWrapper ptr
    def slice sliceFromIndex sliceLength:
        ptr = callHandlingError "bufferSlice" (Pointer None) [self.ptr.toCArg, CInt64.fromInt sliceFromIndex . toCArg, CInt64.fromInt sliceLength . toCArg]
        wrapReleasableResouce BufferWrapper ptr
    def size:
        callHandlingError "bufferSize" CInt64 [self.ptr.toCArg] . toInt
    def data:
        callHandlingError "bufferData" (Pointer None) [self.ptr.toCArg]

class ArrayDataWrapper:
    ptr :: ManagedPointer None

    def nullCount:
        callHelper "arrayDataNullCount" CInt64 [self.ptr.toCArg] . toInt
    def length:
        callHelper "arrayDataLength" CInt64 [self.ptr.toCArg] . toInt
    def offset:
        callHelper "arrayDataOffset" CInt64 [self.ptr.toCArg] . toInt
    def bufferCount:
        callHelper "arrayDataBufferCount" CInt64 [self.ptr.toCArg] . toInt
    def bufferAt index:
        ptr = callHandlingError "arrayDataBufferAt" (Pointer None) [self.ptr.toCArg, CInt64.fromInt index . toCArg]
        wrapReleasableResouce BufferWrapper ptr
    def type:
        ptr = callHandlingError "arrayDataType" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce DataTypeWrapper ptr

def createBuilderWrapper type:
    ptr = callHandlingError ("builder" + type + "New") (Pointer None) []
    wrapReleasableResouce ArrayBuilderWrapper ptr type

class ChunkedArrayWrapper:
    ptr :: ManagedPointer None

    def nullCount:
        callHelper "chunkedArrayNullCount" CInt64 [self.ptr.toCArg] . toInt
    def length:
        callHelper "chunkedArrayLength" CInt64 [self.ptr.toCArg] . toInt
    def chunkCount:
        callHelper "chunkedArrayChunkCount" CInt64 [self.ptr.toCArg] . toInt
    def chunkAt index:
        ptr = callHandlingError "chunkedArrayChunkAt" (Pointer None) [self.ptr.toCArg, CInt32.fromInt index . toCArg]
        wrapReleasableResouce ArrayWrapper ptr
    def type:
        ptr = callHandlingError "chunkedArrayDataType" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce DataTypeWrapper ptr

def createChunkedArrayWrapperSingleton arrayWrapper:
    ptr = callHandlingError "chunkedArrayNewSingleton" (Pointer None) [arrayWrapper.ptr.toCArg]
    wrapReleasableResouce ChunkedArrayWrapper ptr

def createChunkedArrayWrapperChunks arrayWrappers:
    Array (Pointer None) . with (arrayWrappers.each .ptr.ptr) arrayC:
        ptr = callHandlingError "chunkedArrayNewChunks" (Pointer None) [arrayC.ptr.toCArg, CInt32.fromInt arrayC.size . toCArg]
        wrapReleasableResouce ChunkedArrayWrapper ptr


class FieldWrapper:
    ptr :: ManagedPointer None

    def name:
        callHandlingError "fieldName" CString [self.ptr.toCArg] . toText
    def type:
        ptr = callHandlingError "fieldType" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce DataTypeWrapper ptr
    def nullable:
        (callHelper "fieldNullable" CInt8 [self.ptr.toCArg] . toInt) == 1
    def toText:
        callHandlingError "fieldToString" CString [self.ptr.toCArg] . toText
    def equals rhsFieldWrapper:
        (callHandlingError "fieldEquals" CInt8 [self.ptr.toCArg, rhsFieldWrapper.ptr.toCArg] . toInt) == 1

def createFieldWrapper name datatypeWrapper nullable:
    CString.with name nameC:
        ptr = callHandlingError "fieldNew" (Pointer None) [nameC.toCArg, datatypeWrapper.ptr.toCArg, CInt8.fromInt (if nullable then 1 else 0) . toCArg]
        wrapReleasableResouce FieldWrapper ptr

class ColumnWrapper:
    ptr :: ManagedPointer None

    def toCArg:
        self.ptr.toCArg
    def nullCount:
        callHelper "columnNullCount" CInt64 [self.ptr.toCArg] . toInt
    def length:
        callHelper "columnLength" CInt64 [self.ptr.toCArg] . toInt
    def field:
        ptr = callHandlingError "columnField" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce FieldWrapper ptr
    def type:
        ptr = callHandlingError "columnType" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce DataTypeWrapper ptr
    def data:
        ptr = callHandlingError "columnData" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce ChunkedArrayWrapper ptr
    def name:
        callHandlingError "columnName" CString [self.ptr.toCArg] . toText
    def slice fromIndex length:
        ptr = callHandlingError "columnSlice" (Pointer None) [self.ptr.toCArg, CInt64.fromInt fromIndex . toCArg, CInt64.fromInt length . toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def countValues:
        ptr = callHandlingError "columnCountValues" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce TableWrapper ptr
    def min:
        ptr = callHandlingError "columnMin" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def max:
        ptr = callHandlingError "columnMax" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def mean:
        ptr = callHandlingError "columnMean" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def median:
        ptr = callHandlingError "columnMedian" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def std:
        ptr = callHandlingError "columnStd" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def var:
        ptr = callHandlingError "columnVar" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def sum:
        ptr = callHandlingError "columnSum" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def quantile q:
        ptr = callHandlingError "columnQuantile" (Pointer None) [self.ptr.toCArg, CDouble.fromReal q . toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def interpolate:
        ptr = callHandlingError "columnInterpolateNa" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def shift periods:
        ptr = callHandlingError "columnShift" (Pointer None) [self.ptr.toCArg, CInt64.fromInt periods . toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def autoCorr lag:
        callHandlingError "columnAutoCorrelation" (CDouble) [self.ptr.toCArg, CInt64.fromInt lag . toCArg] . toReal

def createColumnWrapper field chunks:
    ptr = callHandlingError "columnNew" (Pointer None) [field.ptr.toCArg, chunks.ptr.toCArg]
    wrapReleasableResouce ColumnWrapper ptr

class SchemaWrapper:
    ptr :: ManagedPointer None

    def fieldCount:
        callHelper "schemaFieldCount" CInt32 [self.ptr.toCArg] . toInt
    def fieldAt index:
        ptr = callHandlingError "schemaFieldAt" (Pointer None) [self.ptr.toCArg, CInt32.fromInt index . toCArg]
        wrapReleasableResouce FieldWrapper ptr
    def toText:
        callHandlingError "schemaToString" CString [self.ptr.toCArg] . toText
    def fieldByName name:
        CString.with name nameC:
            ptr = callHandlingError "schemaFieldByName" (Pointer None) [self.ptr.toCArg, nameC.toCArg]
            case ptr.isNull of
                True: Nothing
                False: Just (wrapReleasableResouce FieldWrapper ptr)
    def fieldIndexByName name:
        CString.with name nameC:
            index = callHandlingError "schemaFieldIndexByName" CInt32 [self.ptr.toCArg, nameC.toCArg] . toInt
            case (index < 0) of
                True: Nothing
                False: Just index
    def addField index fieldWrapper:
        ptr = callHandlingError "schemaAddField" (Pointer None) [self.ptr.toCArg, CInt32.fromInt index . toCArg, fieldWrapper.ptr.ptr.toCArg]
        wrapReleasableResouce SchemaWrapper ptr
    def removeField index:
        ptr = callHandlingError "schemaRemoveField" (Pointer None) [self.ptr.toCArg, CInt32.fromInt index . toCArg]
        wrapReleasableResouce SchemaWrapper ptr
    def toList:
        0 . upto (self.fieldCount - 1) . each self.fieldAt

def createSchemaWrapper fieldWrappers:
    Array (Pointer None) . with (fieldWrappers.each .ptr.ptr) arrayC:
        ptr = callHandlingError "schemaNew" (Pointer None) [arrayC.ptr.toCArg, CInt32.fromInt arrayC.size . toCArg]
        wrapReleasableResouce SchemaWrapper ptr

class TableWrapper:
    ptr :: ManagedPointer None

    def columnCount:
        callHelper "tableColumnCount" CInt32 [self.ptr.toCArg] . toInt
    def rowCount:
        callHelper "tableRowCount" CInt64 [self.ptr.toCArg] . toInt
    def schema:
        ptr = callHandlingError "tableSchema" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce SchemaWrapper ptr
    def columnAt index:
        ptr = callHandlingError "tableColumnAt" (Pointer None) [self.ptr.toCArg, CInt32.fromInt index . toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def addColumn index columnWrapper:
        ptr = callHandlingError "tableAddColumn" (Pointer None) [self.ptr.toCArg, CInt32.fromInt index . toCArg, columnWrapper.ptr.ptr.toCArg]
        wrapReleasableResouce TableWrapper ptr
    def removeColumn index:
        ptr = callHandlingError "tableRemoveColumn" (Pointer None) [self.ptr.toCArg, CInt32.fromInt index . toCArg]
        wrapReleasableResouce TableWrapper ptr
    def equals that:
        callHandlingError "tableEquals" CInt8 [self.ptr.toCArg, that.ptr.toCArg] . toInt == 1
    def toList:
        0 . upto (self.columnCount - 1) . each self.columnAt
    def filter predicate:
        predicateJsonText = predicate.toJSON.toText
        ptr = CString.with predicateJsonText predicateC:
            callHandlingError "tableFilter" (Pointer None) [self.ptr.toCArg, predicateC.toCArg]
        wrapReleasableResouce TableWrapper ptr
    def eachToChunked predicate:
        predicateJsonText = predicate.toJSON.toText
        ptr = CString.with predicateJsonText predicateC:
            callHandlingError "tableMapToChunkedArray" (Pointer None) [self.ptr.toCArg, predicateC.toCArg]
        wrapReleasableResouce ChunkedArrayWrapper ptr
    def eachToColumn name predicate:
        predicateJsonText = predicate.toJSON.toText
        ptr = CString.with predicateJsonText predicateC:
            CString.with name nameC:
                callHandlingError "tableMapToColumn" (Pointer None) [self.ptr.toCArg, nameC.toCArg, predicateC.toCArg]
        wrapReleasableResouce ColumnWrapper ptr
    def dropNa:
        ptr = callHandlingError "tableDropNA" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce TableWrapper ptr
    def dropNaByName name:
        ptr = CString.with name nameC:
            callHandlingError "tableDropNAByName" (Pointer None) [self.ptr.toCArg, nameC.toCArg]
        wrapReleasableResouce TableWrapper ptr
    def fillNa value:
        valueJsonText = value.toLQueryValue.toJSON.toText
        ptr = CString.with valueJsonText valueJsonTextC:
            callHandlingError "tableFillNA" (Pointer None) [self.ptr.toCArg, valueJsonTextC.toCArg]
        wrapReleasableResouce TableWrapper ptr
    def fillNaAt columnName value:
        valueJson = value.toLQueryValue.toJSON
        jsonText = JSON.empty . insert columnName valueJson . toText
        ptr = CString.with jsonText jsonTextC:
            callHandlingError "tableFillNA" (Pointer None) [self.ptr.toCArg, jsonTextC.toCArg]
        wrapReleasableResouce TableWrapper ptr
    def corr:
        ptr = callHandlingError "tableCorrelationMatrix" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce TableWrapper ptr
    def corr:
        ptr = callHandlingError "tableCorrelationMatrix" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce TableWrapper ptr
    def corrWith column:
        ptr = callHandlingError "tableCorrelationWithColumn" (Pointer None) [self.ptr.toCArg, column.ptr.toCArg]
        wrapReleasableResouce ColumnWrapper ptr

    # sortBy :: [(ColumnWrapper, SortOrder, NullPosition))]
    def sort sortBy:
        columnWrapperManagedPtrs = sortBy.each (col, _, _): col.ptr
        columnWrapperPtrs = columnWrapperManagedPtrs.each .ptr
        orders = sortBy.each (_, order, _): order.toCArg
        nullPositions = sortBy.each (_, _, nullPosition): nullPosition.toCArg
        ptr = Array (Pointer None) . with columnWrapperPtrs columnsC:
            Array CInt8 . with orders ordersC:
                Array CInt8 . with nullPositions nullPositionsC:
                    callHandlingError "tableSortedByColumns" (Pointer None) [self.ptr.toCArg, CInt32.fromInt sortBy.length . toCArg, columnsC.toCArg, ordersC.toCArg, nullPositionsC.toCArg]
        wrapReleasableResouce TableWrapper ptr
    def interpolate:
        ptr = callHandlingError "tableInterpolateNa" (Pointer None) [self.ptr.toCArg]
        wrapReleasableResouce TableWrapper ptr
    
    # aggregateBy :: ColumnWrapper -> [(ColumnWrapper, [Int])]
    def aggregateBy keyColumn aggregation:
        aggregatedColumnWrapperManagedPtrs = aggregation.each (col, _): col.ptr
        aggregatedColumnWrapperPtrs = aggregatedColumnWrapperManagedPtrs.each .ptr
        aggregationFunctionIds = aggregation.each (_, aggs): aggs.each CInt8.fromInt
        aggregationFunctionCounts = aggregationFunctionIds.each (CInt8.fromInt _.length)
        ptr = Array (Pointer None) . with aggregatedColumnWrapperPtrs aggregatedColumnsC:
            Array CInt32 . with aggregationFunctionCounts aggregateFunctionCountsC:
                bracket (aggregationFunctionIds.each (Array CInt8 . fromList _)) (_.each .free) listOfAggregatedFunctionCArrays:
                    Array (Pointer CInt8) . with (listOfAggregatedFunctionCArrays.each .ptr) arrayOfArraysWithIds:
                        callHandlingError "tableAggregateBy" (Pointer None) [keyColumn.ptr.toCArg, CInt32.fromInt aggregation.length . toCArg, aggregatedColumnsC.toCArg, aggregateFunctionCountsC.toCArg, arrayOfArraysWithIds.toCArg]
        wrapReleasableResouce TableWrapper ptr

    # aggregateBy :: ColumnWrapper -> [(ColumnWrapper, [Int])]
    def rollingInterval keyColumn intervalNs aggregation:
        aggregatedColumnWrapperManagedPtrs = aggregation.each (col, _): col.ptr
        aggregatedColumnWrapperPtrs = aggregatedColumnWrapperManagedPtrs.each .ptr
        aggregationFunctionIds = aggregation.each (_, aggs): aggs.each CInt8.fromInt
        aggregationFunctionCounts = aggregationFunctionIds.each (CInt8.fromInt _.length)
        ptr = Array (Pointer None) . with aggregatedColumnWrapperPtrs aggregatedColumnsC:
            Array CInt32 . with aggregationFunctionCounts aggregateFunctionCountsC:
                bracket (aggregationFunctionIds.each (Array CInt8 . fromList _)) (_.each .free) listOfAggregatedFunctionCArrays:
                    Array (Pointer CInt8) . with (listOfAggregatedFunctionCArrays.each .ptr) arrayOfArraysWithIds:
                        callHandlingError "tableRollingTimeInterval" (Pointer None) [keyColumn.ptr.toCArg, CInt64.fromInt intervalNs . toCArg, CInt32.fromInt aggregation.length . toCArg, aggregatedColumnsC.toCArg, aggregateFunctionCountsC.toCArg, arrayOfArraysWithIds.toCArg]
        wrapReleasableResouce TableWrapper ptr

def createTableWrapper schemaWrapper columnWrappers:
    Array (Pointer None) . with (columnWrappers.each .ptr.ptr) columnsCArray:
        ptr = callHandlingError "tableNewFromSchamColumns" (Pointer None) [schemaWrapper.ptr.toCArg, columnsCArray.ptr.toCArg, CInt32.fromInt columnsCArray.size . toCArg]
        wrapReleasableResouce TableWrapper ptr

def readTableFromFile path:
    CString.with path pathC:
        ptr = callHandlingError "readTableFromFile" (Pointer None) [pathC.toCArg]
        wrapReleasableResouce TableWrapper ptr

class CsvParserMode:
    ParseCSVFile Text
    ParseXLSXFile Text
    ParseCSVContents Text

    def dummy: None

def callCsvParser mode namePolicy typePolicy:
    (fname, data) = case mode of
        ParseCSVFile path: ("readTableFromCSVFile", path)
        ParseXLSXFile path: ("readTableFromXLSXFile", path)
        ParseCSVContents contents: ("readTableFromCSVFileContents", contents)
    withCStringArray namePolicy.names namesCStringCArray:
        Array CInt8 . with (typePolicy.each v: CInt8.fromInt v.toArrowId) typeIdsC:
            Array CInt8 . with (typePolicy.each v: CInt8.fromInt (if v.nullable then 1 else 0)) nullablesC:
                namesMode = case namePolicy of
                    TakeFromFirstRow: 0
                    Generate: 1
                    CustomNames l: l.length.negate
                nullptr = Pointer None . null . toCArg
                ptr = CString.with data dataC:
                    callHandlingError fname (Pointer None) [dataC.toCArg, namesCStringCArray.ptr.toCArg, CInt32.fromInt namesMode . toCArg, typeIdsC.ptr.toCArg, nullablesC.ptr.toCArg, CInt32.fromInt typePolicy.length . toCArg]
                wrapReleasableResouce TableWrapper ptr
