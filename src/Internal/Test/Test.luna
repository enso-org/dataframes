import Std.Test
import Std.Time

import Dataframes.Internal.ArrayBuilder
import Dataframes.Array
import Dataframes.ChunkedArray
import Dataframes.Column
import Dataframes.DataType
import Dataframes.Field
import Dataframes.Schema
import Dataframes.Table
import Dataframes.Types
import Dataframes.IO.Options
import Dataframes.IO

def executeTest msg action:
    result = runError action
    case result of
        Left e: print ("[FAILURE] " + msg + ": " + e)
        Right v: print ("[SUCCESS] " + msg + ": " + v.toText)
    None

def require pred msg:
    if pred then msg else throw msg
def assert msg act:
    executeTest msg (require act "predicate")
def assertEqual msg a b:
    executeTest msg (require (a == b) (a.toText + " == " + b.toText))
def assertNE msg a b:
    executeTest msg (require (a == b).not (a.toText + " != " + b.toText))
def assertGE msg a b:
    executeTest msg (require (a >= b) (a.toText + " >= " + b.toText))
def assertLE msg a b:
    executeTest msg (require (a <= b) (a.toText + " <= " + b.toText))
def assertNoThrow msg action:
    result = runError action
    print case result of
        Left e: "[FAILUJE] " + msg + ": threw " + e
        Right v: "[SUCCESS] " + msg + ": didn't throw: " + v.toText
def assertThrow msg action:
    result = runError action
    print case result of
        Left e: "[SUCCESS] " + msg + ": threw " + e
        Right v: "[FAILURE] " + msg + ": no throw: " + v.toText

class TestArrayBuilder:
    def testDoubleBuilder:
        print "=== Testing for Double ==="
        builder = ArrayBuilder DoubleType . create
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertEqual "type width" type.bitWidth 64
        assertEqual "type name" type.name "double"
        assertEqual "type as text" type.toText "double"
        builder.append 7.0
        builder.appendMany (1 . upto 3 . each .toReal)
        assertGE "builder.capacity" builder.capacity 4
        assertEqual "builder.length" builder.length 4
        builtArrayWrapper = builder.finish
        builtArray = ArrayVal builder.typeTag builtArrayWrapper
        assertThrow ("invalid index -1 throws") (builtArray.valueAt -1)
        assertThrow ("invalid index 6 throws") (builtArray.valueAt 6)
        assertEqual "built single elem array" builtArray.toList [7.0, 1.0, 2.0, 3.0]
    def testInt64Builder:
        print "=== Testing for Int ==="
        builder = ArrayBuilder Int64Type . create
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertEqual "type width" type.bitWidth 64
        assertEqual "type name" type.name "int64"
        assertEqual "type as text" type.toText "int64"
        builder.append 7
        builder.appendMany (1 . upto 5)
        assertGE "builder.capacity" builder.capacity 6
        assertEqual "builder.length" builder.length 6
        builtArrayWrapper = builder.finish
        builtArray = ArrayVal builder.typeTag builtArrayWrapper
        assertThrow ("invalid index -1 throws") (builtArray.valueAt -1)
        assertThrow ("invalid index 6 throws") (builtArray.valueAt 6)
        assertEqual "built single elem array" builtArray.toList [7, 1, 2, 3, 4, 5]
        assertEqual "map to the same type" (builtArray.mapSame (+10) . toList) [17, 11, 12, 13, 14, 15]
        def someFunction num: if num > 3 then Nothing else Just ("foo " + num.toText)
        assertEqual "map that changes type" (builtArray.map MaybeStringType someFunction . toList) [Nothing, Just "foo 1", Just "foo 2", Just "foo 3", Nothing, Nothing]

    def testMaybeInt64Builder:
        print "=== Testing for (Maybe Int) ==="
        builder = ArrayBuilder MaybeInt64Type . create
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertEqual "type width" type.bitWidth 64
        assertEqual "type name" type.name "int64"
        assertEqual "type as text" type.toText "int64"
        builder.append (Just 7)
        builder.append (Nothing)
        builder.appendMany (1 . upto 3 . each (Just))
        assertGE "builder.capacity" builder.capacity 5
        assertEqual "builder.length" builder.length 5
        builtArrayWrapper = builder.finish
        builtArray = ArrayVal builder.typeTag builtArrayWrapper
        assert "not null at 0" (builtArray.nullAt 0 . not)
        assert "null at 1" (builtArray.nullAt 1)
        assertThrow "null at -1 throws" (builtArray.nullAt -1)
        assertEqual "value at 0" (builtArray.valueAt 0) (Just 7)
        assertEqual "value at 1" (builtArray.valueAt 1) Nothing
        assertEqual "built single elem array" builtArray.toList [Just 7, Nothing, Just 1, Just 2, Just 3]
        assertEqual "map to the same type" (builtArray.mapSame (_.map (+10)) . toList) [Just 17, Nothing, Just 11, Just 12, Just 13]

    # TODO: properly handle `assertEqual "type width" type.bitWidth 64`
    def testMaybeStringBuilder:
        print "=== Testing for (Maybe Text) ==="
        builder = ArrayBuilder MaybeStringType . create
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertThrow "type width throws (not fixed width type)" type.bitWidth
        assertEqual "type name" type.name "utf8"
        assertEqual "type as text" type.toText "string"
        builder.append (Just "first")
        builder.append (Nothing)
        nums = (1 . upto 3) . each (Just _.toText)
        print ("nums: " + nums.toText)
        builder.appendMany (nums)
        assertGE "builder.capacity" builder.capacity 5
        assertEqual "builder.length" builder.length 5
        builtArrayWrapper = builder.finish
        builtArray = ArrayVal builder.typeTag builtArrayWrapper
        assert "not null at 0" (builtArray.nullAt 0 . not)
        assert "null at 1" (builtArray.nullAt 1)
        assertEqual "value at 0" (builtArray.valueAt 0) (Just "first")
        assertEqual "value at 1" (builtArray.valueAt 1) Nothing
        assertEqual "built single elem array" builtArray.toList [Just "first", Nothing, Just "1", Just "2", Just "3"]
        print "================================="
        print (builtArray.mapSame elem:
            case elem of
                Just val: Just (val + "-suffix")
                Nothing: Nothing)

    def testTimestampBuilder:
        print "=== Testing for Timestamp ==="
        el0 = Time.fromTimeOfYear 2018 09 16 $ Just TimeZone.utc
        el1 = Time.fromTimeOfYear 2018 09 17 $ Just TimeZone.utc
        el2 = Time.fromTimeOfYear 2018 09 18 $ Just TimeZone.utc
        builder = ArrayBuilder TimestampType . create
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertEqual "type width" type.bitWidth 64
        assertEqual "type name" type.name "timestamp"
        assertEqual "type as text" type.toText "timestamp[ns]"
        builder.append el0
        builder.appendMany [el1, el2]
        assertGE "builder.capacity" builder.capacity 3
        assertEqual "builder.length" builder.length 3
        builtArrayWrapper = builder.finish
        builtArray = ArrayVal builder.typeTag builtArrayWrapper
        assertThrow ("invalid index -1 throws") (builtArray.valueAt -1)
        assertThrow ("invalid index 3 throws") (builtArray.valueAt 3)
        assertEqual "built single elem array" builtArray.toList [el0, el1, el2]
        gotEl0 = builtArray.valueAt 0
        assertEqual "element [0]" el0 gotEl0
        assertEqual "element [0] epoch" el0.toEpoch gotEl0.toEpoch
        assertEqual "element [0] text" el0.toText gotEl0.toText

    def testMaybeTimestampBuilder:
        print "=== Testing for (Maybe Timestamp) ==="
        el0 = Just $ (Time.fromTimeOfYear 2018 09 16 $ Just TimeZone.utc)
        el1 = Nothing
        el2 = Just $ (Time.fromTimeOfYear 2018 09 18 $ Just TimeZone.utc)
        builder = ArrayBuilder MaybeTimestampType . create
        type = builder.type
        assertEqual "initial capacity" builder.capacity 0
        assertEqual "initial length" builder.length 0
        assertEqual "type width" type.bitWidth 64
        assertEqual "type name" type.name "timestamp"
        assertEqual "type as text" type.toText "timestamp[ns]"
        builder.append el0
        builder.appendMany [el1, el2]
        assertGE "builder.capacity" builder.capacity 3
        assertEqual "builder.length" builder.length 3
        builtArrayWrapper = builder.finish
        builtArray = ArrayVal builder.typeTag builtArrayWrapper
        assertThrow ("invalid index -1 throws") (builtArray.valueAt -1)
        assertThrow ("invalid index 3 throws") (builtArray.valueAt 3)
        assertEqual "built single elem array" builtArray.toList [el0, el1, el2]

    def testRoundTrip msg typeTag list:
        arr = Array typeTag . fromList list
        assertEqual "array and list length same" arr.length list.length
        assertEqual msg (arr . toList) list

    def testListArrayRoundTrip:
        print "=== Testing list <-> array round trip ==="
        self.testRoundTrip "Double64 round trip" DoubleType [10.25, -5.825,  5000000000.0]
        self.testRoundTrip "Maybe Double64 round trip" MaybeDoubleType [Just 10.25, Just -5.825, Just 5000000000.0, Nothing]
        self.testRoundTrip "Int32 round trip" Int32Type [10, -5,  1000000000]
        self.testRoundTrip "Maybe Int32 round trip"MaybeInt32Type [Just 10, Just -5, Just 1000000000, Nothing]
        self.testRoundTrip "Int64 round trip" Int64Type [10, -5,  5000000000]
        self.testRoundTrip "Maybe Int64 round trip"MaybeInt64Type [Just 10, Just -5, Just 5000000000, Nothing]
        self.testRoundTrip "Text round trip" StringType ["ten", "-5", "legion"]
        self.testRoundTrip "Maybe Text round trip" MaybeStringType [Just "ten", Just "-5", Just "legion", Nothing]

    def testSlicing:
        print "=== Testing slicing ==="
        arr = Array Int32Type . fromList [1, 2, 3, 4, 5]
        arr2 = arr.slice 1 3
        assertEqual "slice result" arr2.toList [2, 3, 4]
        buf1Ptr = arr.data.bufferAt 1 . data
        buf2Ptr = arr2.data.bufferAt 1 . data
        assert "ptr equal" (buf1Ptr.ptr == buf2Ptr.ptr)
        assertEqual "sliced data has proper offset" arr2.data.offset (arr.data.offset+1)

    def testChunkedArray:
        print "=== Testing ChunkedArray ==="
        arr = Array Int32Type . fromList [1, 2, 3, 4, 5]
        charr = ChunkedArray.fromChunk arr
        assertEqual "chunked array type" charr.type.name "int32"
        assertEqual "single chunk" charr.chunkCount 1
        assertEqual "length" charr.length 5

        arr2 = Array Int32Type . fromList [10, 20, 30]
        charr2 = ChunkedArray.fromChunks [arr, arr2]
        assertEqual "chunked array type" charr2.type.name "int32"
        assertEqual "single chunk" charr2.chunkCount 2
        assertEqual "length" charr2.length 8
        assertEqual "null count" charr2.nullCount 0
        assertEqual "second chunk" (charr2.chunkAt 1 . toList) [10, 20, 30]
        assertEqual "as list" charr2.toList [1, 2, 3, 4, 5, 10, 20, 30]

    def testDatatype:
        print "=== Testing DataType ==="
        typeInt32 = DataType.fromTypeTag Int32Type
        assertEqual "name" typeInt32.name "int32"
        assertEqual "bitWidth" typeInt32.bitWidth 32

        typeInt64 = DataType.fromTypeTag Int64Type
        assertEqual "name" typeInt64.name "int64"
        assertEqual "bitWidth" typeInt64.bitWidth 64

        typeDouble = DataType.fromTypeTag DoubleType
        assertEqual "name" typeDouble.name "double"
        assertEqual "bitWidth" typeDouble.bitWidth 64

        typeString = DataType.fromTypeTag StringType
        assertEqual "name" typeString.name "utf8"
        assertThrow "bitWidth" typeString.bitWidth

    def testField:
        print "=== Testing Field ==="
        fieldInt64 = Field.fromTypeTag "x" Int64Type
        assertEqual "name" fieldInt64.name "x"
        assertEqual "type.name" fieldInt64.type.name "int64"
        assertEqual "nullable" fieldInt64.nullable False

        fieldMaybeString = Field.fromTypeTag "handle_name" MaybeStringType
        assertEqual "name" fieldMaybeString.name "handle_name"
        assertEqual "type.name" fieldMaybeString.type.name "utf8"
        assertEqual "nullable" fieldMaybeString.nullable True

    def testColumn:
        print "=== Testing Column ==="
        col = Column.fromList "good numbers" Int64Type [1,20,333]
        assertEqual "length" col.length 3
        assertEqual "name" col.name "good numbers"
        isIntCol = case col of
            ColumnInt _: True
            _: False
        assert "matched ColumnInt" isIntCol
        intCol = case col of
            ColumnInt tc: tc
        assertEqual "intCol.toList" intCol.toList [1,20,333]
        assertEqual "slice 1 1" (col.slice 1 1).toList [20]
        assertEqual "slice 1 2" (col.slice 1 2).toList [20, 333]

        colMappedReal = col.map Int64Type DoubleType "reals" (num: num.toReal + 1.5)
        print "========================================"
        assertEqual "real name" colMappedReal.name "reals"
        assertEqual "real contents" colMappedReal.toList [2.5, 21.5, 334.5]
        colMappedText = colMappedReal.map DoubleType StringType "good strings" (num: "good " + num.toText)
        assertEqual "text name" colMappedText.name "good strings"
        assertEqual "text contents" colMappedText.toList ["good 2.5", "good 21.5", "good 334.5"]
        colMappedMaybeText = colMappedText.map StringType MaybeStringType "maybe strings" Just
        assertEqual "maybe text contents" colMappedMaybeText.toList [Just "good 2.5", Just "good 21.5", Just "good 334.5"]
        colMappedMaybeInt = colMappedMaybeText.map MaybeStringType MaybeInt64Type "maybe strings" (maybeText: maybeText.map .length)
        assertEqual "maybe int contents" colMappedMaybeInt.toList [Just 8, Just 9, Just 10]
        colMappedMaybeReal = colMappedMaybeInt.map MaybeInt64Type MaybeDoubleType "maybe strings" (maybeNum: Just (maybeNum.get.toReal + 0.5))
        assertEqual "maybe real contents" colMappedMaybeReal.toList [Just 8.5, Just 9.5, Just 10.5]

        print "=== Creating index"
        colIndex = Column.createIndex 5
        assertEqual "index name" colIndex.name "index"
        assertEqual "indices" colIndex.toList [0, 1, 2, 3, 4]

    def testSchema:
        print "=== Testing Schema ==="
        x = Field.fromTypeTag "x" Int64Type
        y = Field.fromTypeTag "y" Int64Type
        z = Field.fromTypeTag "z" MaybeInt64Type
        name = Field.fromTypeTag "name" StringType
        value = Field.fromTypeTag "value" DoubleType

        schema = Schema.fromFields [x, y, z, name]
        assertEqual "fieldCount" schema.fieldCount 4
        assertThrow "field negative index" (schema.fieldAt -1)
        assertEqual "field name" (schema.fieldAt 0 . name) "x"
        assertEqual "field name" (schema.fieldAt 1 . name) "y"
        assertEqual "field name" (schema.fieldAt 2 . name) "z"
        assertEqual "field name" (schema.fieldAt 3 . name) "name"
        assertThrow "field past size" (schema.fieldAt 4)
        assert "field 0 is x" (schema.fieldAt 0 . ptr . ptr . ptr == x.ptr.ptr.ptr)
        assert "field 0 is not y" (schema.fieldAt 0 . ptr . ptr . ptr == y.ptr.ptr.ptr).not
        assertGE "produces non-empty text" schema.toText.length 0
        assertEqual "find x" (schema.fieldByName "x" . get . name) "x"
        assertEqual "find w" (schema.fieldByName "w") Nothing
        assertEqual "find z index" (schema.fieldIndexByName "z") (Just 2)
        assertEqual "find v index" (schema.fieldIndexByName "v") Nothing
        assertEqual "schema fields list" schema.toList [x, y, z, name]
        assertNE "schema fields list" schema.toList [x, z, y, name]

        schema2 = schema.addField 3 value
        assertEqual "schema2 fieldCount" schema2.fieldCount 5
        assertEqual "schema2 fields list" schema2.toList [x, y, z, value, name]
        assertThrow "add field past index" (schema.addField 5 value)
        assertThrow "add field past index" (schema.addField -1 value)
        assertEqual "schema2b fields list" (schema.addField 4 value . toList) [x, y, z, name, value]
        assertEqual "schema2c fields list" (schema2.addField 4 value . toList) [x, y, z, value, value, name]

        schema3 = schema2.removeField 2
        assertEqual "schema3 fieldCount" schema3.fieldCount 4
        assertEqual "schema3 fields list" schema3.toList [x, y, value, name]
        assertThrow "remove field past index" (schema2.removeField -1)
        assertThrow "remove field past index" (schema2.removeField 5)

    def testTable:
        print "=== Testing Table ==="
        colX = Column.fromList "x" Int64Type [0, 10, -10, 500]
        colY = Column.fromList "y" Int64Type [1, 2, 3, 600]
        colName = Column.fromList "name" StringType ["start", "left", "right", "far away"]
        t = Table.fromColumns [colX, colY, colName]

        assertEqual "column count" t.columnCount 3
        assertEqual "row count" t.rowCount 4

        schema = t.schema
        assertEqual "schema has 3 fields" schema.fieldCount 3
        assertEqual "field 0" (schema.fieldAt 0) colX.field
        assertEqual "field 1" (schema.fieldAt 1) colY.field
        assertEqual "field 2" (schema.fieldAt 2) colName.field

        assertThrow "access column -1" (t.columnAt -1 . toText)
        assertThrow "access column 50" (t.columnAt 50 . toText)

        col0 = t.columnAt 0
        assertEqual "column 0 contents" col0.toList [0, 10, -10, 500]
        assertEqual "column 0 name" col0.name "x"

        assertThrow "removing column by index -1" (t.removeByIndex -1)
        assertThrow "removing column by index 3" (t.removeByIndex 3)

        t2 = t.removeByIndex 2
        assertEqual "columnCount" t2.columnCount 2
        assertEqual "rowCount" t2.rowCount 4
        assertEqual "names" t2.columnNames ["x", "y"]

        assertThrow "adding column at -1" (t2.addColumn -1 colName)
        assertThrow "adding column at 3" (t2.addColumn 3 colName)

        t3 = t2.addColumn 1 colName
        assertEqual "names" t3.columnNames ["x", "name", "y"]
        t3b = t2.addColumn 2 colName
        assertEqual "names" t3b.columnNames ["x", "y", "name"]
        assertEqual "add-remove equivalence" t t3b
        assertNE "order equivalence" t t3

        col0JSON = t.columnAt 0 . toJSON
        print $ "COLUMN 0 JSON: " + col0JSON.toText
        assertNoThrow "column json is map" col0JSON.asObject
        assertEqual "object size" (col0JSON.safeAsObject.map .size) (Just 2)
        assertEqual "header" (col0JSON.lookup "header") (Just ["x"].toJSON)
        assertEqual "data" (col0JSON.lookup "data") (Just [[0], [10], [-10], [500]].toJSON)

        tableJson = t.toJSON
        assertEqual "header" (tableJson.lookup "header") (Just ["x", "y", "name"].toJSON)

    def testIO:
        print "=== Testing IO ==="
        print "CSV parsing case 1"
        t1 = CSVParser . useCustomNames ["x", "y", "z"] . setTypes [IntElement, MaybeIntElement] . readText "1,2,3"
        assertEqual "names" t1.columnNames ["x", "y", "z"]
        assertEqual "column count" t1.columnCount 3
        assertEqual "row count" t1.rowCount 1
        assertEqual "col 0 typename" (t1.columnAt 0 . field.type.name) "int64"
        assertEqual "col 0 nullable" (t1.columnAt 0 . field.nullable) False
        assertEqual "col 0 toList" (t1.columnAt 0 . toList) [1]
        assertEqual "col 1 typename" (t1.columnAt 1 . field.type.name) "int64"
        assertEqual "col 1 nullable" (t1.columnAt 1 . field.nullable) True
        assertEqual "col 1 toList" (t1.columnAt 1 . toList) [Just 2]
        assertEqual "col 2 typename" (t1.columnAt 2 . field.type.name) "int64"
        assertEqual "col 2 nullable" (t1.columnAt 2 . field.nullable) False
        assertEqual "col 2 toList" (t1.columnAt 2 . toList) [3]

        print "CSV parsing case 2"
        t2 = CSVParser . useCustomNames ["x", "y"] . setTypes [] . readText '"1,""2,3"'
        assertEqual "names" t2.columnNames ["x"]
        assertEqual "col 0 toList" (t2.columnAt 0 . toList) ['1,"2,3']

        print "CSV parsing case 3"
        t3 = CSVParser . useGeneratedColumnNames . setTypes [MaybeRealElement, TextElement, TextElement] . readText '1,f\n2.5,1\nk\n5'
        assertEqual "column count" t3.columnCount 2
        assertEqual "row count" t3.rowCount 4
        assertEqual "col 0 toList" (t3.columnAt 0 . toList) [Just 1.0, Just 2.5, Nothing, Just 5.0]

        print "CSV parsing case 4 - file"
        t4 = CSVParser . setTypes [IntElement, MaybeIntElement] . readFile "samples/simple_empty.csv"
        assertEqual "names" t4.columnNames ["a", "b", "c"]
        assertEqual "row count" t4.rowCount 4
        assertEqual "column 0" (t4.columnAt 0 . toList) [1,4,7,10]
        assertEqual "column 1" (t4.columnAt 1 . toList) [Just 2, Nothing, Just 8, Just 11]
        assertEqual "column 2" (t4.columnAt 2 . toList) [3, 6, 9, 12]

        print "Generate case 1"
        assertEqual "generated" (CSVGenerator.generateText t1) 'x,y,z\n1,2,3'
        assertEqual "generated" (CSVGenerator.setHeaderPolicy WriteHeaderLine . setQuotingPolicy QuoteWhenNeeded . generateText t1) 'x,y,z\n1,2,3'
        assertEqual "generated" (CSVGenerator.setHeaderPolicy SkipHeaderLine . setQuotingPolicy QuoteWhenNeeded . generateText t1) '1,2,3'
        assertEqual "generated" (CSVGenerator.setHeaderPolicy SkipHeaderLine . setQuotingPolicy QuoteAllFields . generateText t1) '"1","2","3"'
        assertEqual "generated" (CSVGenerator.setHeaderPolicy WriteHeaderLine . setQuotingPolicy QuoteAllFields . generateText t1) '"x","y","z"\n"1","2","3"'

        print "Generate case 2"
        assertEqual "generated" (CSVGenerator.setHeaderPolicy SkipHeaderLine . generateText t2) '"1,""2,3"'

        print "Parse excel 1"
        te1 = XLSXParser . useGeneratedColumnNames  . readFile "samples/sample_xlsx.xlsx"
        assertEqual "column 0" (te1.columnAt 0 . toList) ["1", "4", "7", "10"]
        assertEqual "column 1" (te1.columnAt 1 . toList) ["2", "", "8", "11"]
        assertEqual "column 2" (te1.columnAt 2 . toList) ["3", "6", "9", "12"]

    def testFiltering:
        print "=== Testing filtering ==="
        numbersCol = Column.fromList "numbers" Int64Type $ 1.upto 10
        numbersTable = Table.fromColumns [numbersCol]
        numbersTableFiltered = numbersTable.filter (row: row.at "numbers" > 5)
        assertEqual "filtered > 5" (numbersTableFiltered.columnAt 0 . toList) [6, 7, 8, 9, 10]

        print "=== Testing filtering with nulls ==="
        maybeIntColumn = Column.fromList "numbers" MaybeInt64Type [Just 1, Nothing, Just 3, Nothing, Just 5]
        maybeTextColumn = Column.fromList "texts" MaybeStringType [Nothing, Nothing, Just "Third", Just "Fourth", Just "Fifth"]
        maybeDoubleColumn = Column.fromList "doubles" MaybeDoubleType [Nothing, Nothing, Just 3.0, Just 4.0, Just 5.0]
        maybeIntTable = Table.fromColumns [maybeIntColumn, maybeTextColumn, maybeDoubleColumn]
        maybeIntFiltered = maybeIntTable.filter (row: row.at "numbers" < 4)
        assertEqual "numbers < 4: numbers" (maybeIntFiltered.columnAt 0 . toList) [Just 1, Just 3]
        assertEqual "numbers < 4: texts" (maybeIntFiltered.columnAt 1 . toList) [Nothing, Just "Third"]
        assertEqual "numbers < 4: texts null count" (maybeIntFiltered.columnAt 1 . nullCount) 1
        assertEqual "numbers < 4: doubles" (maybeIntFiltered.columnAt 2 . toList) [Nothing, Just 3.0]
        assertEqual "numbers < 4: doubles null count" (maybeIntFiltered.columnAt 2 . nullCount) 1

        print "=== Testing filtering with timestamp ==="
        t0 = Time.fromTimeOfYear 2018 09 16 $ Just TimeZone.utc
        t1 = Time.fromTimeOfYear 2018 09 17 $ Just TimeZone.utc
        t2 = Time.fromTimeOfYear 2018 09 18 $ Just TimeZone.utc
        timeCol = Column.fromList "time" TimestampType [t0, t1, t2]
        timeTable = Table.fromColumns [timeCol]
        timeTableLater = timeTable.filter row: row.at "time" > t1
        assertEqual "timestamp >" (timeTableLater.columnAt 0 . toList) [t2]
        timeTableLater = timeTable.filter row: row.at "time" < t1
        assertEqual "timestamp <" (timeTableLater.columnAt 0 . toList) [t0]
        timeTableLater = timeTable.filter row: row.at "time" == t1
        assertEqual "timestamp ==" (timeTableLater.columnAt 0 . toList) [t1]

    def testMapping:

        print "=== Testing mapping with null ==="
        maybeTextColumn = Column.fromList "texts" MaybeStringType [Just "foo", Nothing, Just "baz"]
        maybeTextTable = Table.fromColumns [maybeTextColumn]
        maybeTextMapped1 = maybeTextTable.each row: row.at "texts"
        assertEqual "ints+5" maybeTextMapped1.toList [Just "foo", Nothing, Just "baz"]

        maybeIntColumn = Column.fromList "ints" MaybeInt64Type [Just 1, Nothing, Just 3, Just 4, Just 5]
        maybeIntTable = Table.fromColumns [maybeIntColumn]
        maybeMapped1 = maybeIntTable.each row: row.at "ints" + 5
        assertEqual "ints+5" maybeMapped1.toList [Just 6, Nothing, Just 8, Just 9, Just 10]

        print "=== Testing mapping ==="
        intsCol = Column.fromList "ints" Int64Type $ 1.upto 5
        doublesCol = Column.fromList "doubles" DoubleType $ [3.0, 2.0, 1.0, 0.0, -1.0]
        intsTable = Table.fromColumns [intsCol, doublesCol]
        mappedCol1 = intsTable.each row: row.at "ints" + 5
        assertEqual "ints+5" mappedCol1.toList [6, 7, 8, 9, 10]
        mappedCol2 = intsTable.each row: (row.at "ints" . negate)
        assertEqual "-ints" mappedCol2.toList [-1, -2, -3, -4, -5]
        mappedCol3 = intsTable.each (row: (row.at "ints") * 2)
        assertEqual "ints*2" mappedCol3.toList [2, 4, 6, 8, 10]
        mappedCol4 = intsTable.each (row: (row.at "ints") * (row.at "ints"))
        assertEqual "ints*ints" mappedCol4.toList [1, 4, 9, 16, 25]

        print "=== Testing mapping with timestamp ==="
        t0 = Time.fromTimeOfYear 2018 10 16 $ Just TimeZone.utc
        t1 = Time.fromTimeOfYear 2017 11 17 $ Just TimeZone.utc
        t2 = Time.fromTimeOfYear 2016 09 18 $ Just TimeZone.utc
        timeCol = Column.fromList "time" TimestampType [t0, t1, t2]
        timeTable = Table.fromColumns [timeCol]
        dayCol = timeTable.each row: row.at "time" . day
        assertEqual "time.day" dayCol.toList [16, 17, 18]
        monthCol = timeTable.each row: row.at "time" . month
        assertEqual "time.month" monthCol.toList [10, 11, 09]
        yearCol = timeTable.each row: row.at "time" . year
        assertEqual "time.year" yearCol.toList [2018, 2017, 2016]

    def testDropping:
        intCol  = Column.fromList "a" MaybeInt64Type  [Just 0,   Nothing,  Just 2,   Just 3,   Just 4  ]
        realCol = Column.fromList "b" MaybeDoubleType [Just 0.0, Just 1.0, Nothing,  Just 3.0, Just 4.0]
        textCol = Column.fromList "c" MaybeStringType [Just "0", Just "1", Just "2", Just "3", Nothing ]
        table = Table.fromColumns [intCol, realCol, textCol]

        tableDroppedAll = table.dropNa
        assertEqual "dropNa: col int" (tableDroppedAll.columnAt 0 . toList) [Just 0, Just 3]
        assertEqual "dropNa: col double" (tableDroppedAll.columnAt 1 . toList) [Just 0.0, Just 3.0]
        assertEqual "dropNa: col text" (tableDroppedAll.columnAt 2 . toList) [Just "0", Just "3"]

        tableDroppedByA = table.dropNaAt "a"
        assertEqual 'dropNaAt "a": col int' (tableDroppedByA.columnAt 0 . toList) [Just 0, Just 2, Just 3, Just 4]
        assertEqual 'dropNaAt "a": col double' (tableDroppedByA.columnAt 1 . toList) [Just 0.0, Nothing, Just 3.0, Just 4.0]
        assertEqual 'dropNaAt "a": col text' (tableDroppedByA.columnAt 2 . toList) [Just "0", Just "2", Just "3", Nothing]

        assertThrow 'dropNaAt "d"' $ table.dropNaAt "d"

    def testFilling:
        intCol  = Column.fromList "a" MaybeInt64Type  [Just 0,   Nothing,  Just 2,   Just 3  ]
        realCol = Column.fromList "b" MaybeDoubleType [Just 0.0, Just 1.0, Nothing,  Just 3.0]
        textCol = Column.fromList "c" MaybeStringType [Just "0", Just "1", Just "2", Nothing ]
        table = Table.fromColumns [intCol, realCol, textCol]

        filled8 = table.fillNa 8
        assertEqual "filled with 8: a" (filled8.columnAt 0 . toList) [0, 8, 2, 3]
        assertEqual "filled with 8: b" (filled8.columnAt 1 . toList) [0.0, 1.0, 8.0, 3.0]
        assertEqual "filled with 8: c" (filled8.columnAt 2 . toList) ["0", "1", "2", "8"]

        filled4S = table.fillNa "4.0"
        assertEqual "filled with '4.0': a" (filled4S.columnAt 0 . toList) [0, 4, 2, 3]
        assertEqual "filled with '4.0': b" (filled4S.columnAt 1 . toList) [0.0, 1.0, 4.0, 3.0]
        assertEqual "filled with '4.0': c" (filled4S.columnAt 2 . toList) ["0", "1", "2", "4.0"]
        assertThrow "filling non-string with non-parsable string" (table.fillNa "foo")

        filledB8 = table.fillNaAt "b" 8
        assertEqual "filled at 'b' with 8: a" (filledB8.columnAt 0 . toList) [Just 0,   Nothing,  Just 2,   Just 3  ]
        assertEqual "filled at 'b' with 8: b" (filledB8.columnAt 1 . toList) [0.0, 1.0, 8.0, 3.0]
        assertEqual "filled at 'b' with 8: c" (filledB8.columnAt 2 . toList) [Just "0", Just "1", Just "2", Nothing ]

        assertThrow "filling column by wrong name" $ table.fillNaAt "d" 8

    def testCountValues:
        print "countValues: nullable int64"
        intCol = Column.fromList "a" MaybeInt64Type  [Just 0,   Nothing,  Just 2, Just 3, Just 2]
        col0 = intCol.countValues.columnAt 0
        col1 = intCol.countValues.columnAt 1
        assertEqual "first col name"  col0.name "value"
        assertEqual "second col name" col1.name "count"
        assertEqual "first col contents"  col0.toList [Just 0, Just 2, Just 3, Nothing]
        assertEqual "second col name" col1.toList [1, 2, 1, 1]

        print "countValues: nullable string"
        textCol = Column.fromList "a" MaybeStringType  [Just "foo", Just "foo", Nothing, Nothing, Just "bar", Just "foo"]
        textCol0 = textCol.countValues.columnAt 0
        textCol1 = textCol.countValues.columnAt 1
        assertEqual "first col name"  textCol0.name "value"
        assertEqual "second col name" textCol1.name "count"
        assertEqual "first col contents"  textCol0.toList [Just "foo", Just "bar", Nothing]
        assertEqual "second col name"     textCol1.toList [3, 1, 2]

        print "countValues: non-nullable double"
        doubleCol = Column.fromList "a" DoubleType  [1.0, 2.0, 3.0, 2.0, 2.5]
        doubleCol0 = doubleCol.countValues.columnAt 0
        doubleCol1 = doubleCol.countValues.columnAt 1
        assertEqual "first col name"  doubleCol0.name "value"
        assertEqual "second col name" doubleCol1.name "count"
        assertEqual "first col contents"  doubleCol0.toList [1.0, 3.0, 2.0, 2.5]
        assertEqual "second col name"     doubleCol1.toList [1, 1, 2, 1]

    def testStats:
        print "countValues: nullable int64"
        intCol = Column.fromList "a" MaybeInt64Type  [Just 1, Nothing,  Just 2, Just 4, Just 9]

        minOnInts = intCol.min
        assertEqual "ints min" minOnInts.toList [1]
        maxOnInts = intCol.max
        assertEqual "ints max" maxOnInts.toList [9]
        meanOnInts = intCol.mean
        assertEqual "ints mean" meanOnInts.toList [4.0]
        medianOnInts = intCol.median
        assertEqual "ints median" medianOnInts.toList [3.0]
        stdOnInts = intCol.std
        assertEqual "ints std" stdOnInts.toList [9.5 . sqrt]
        varOnInts = intCol.var
        assertEqual "ints var" varOnInts.toList [9.5]
        sumOnInts = intCol.sum
        assertEqual "ints sum" sumOnInts.toList [16]
        tercileOnInts = intCol.quantile (1.0/4.0)
        assertEqual "ints tercile " tercileOnInts.toList [1.5]

        doubleCol = Column.fromList "b" Int64Type [2, 4, 6, 5, 8]
        table2 = Table.fromColumns [intCol, doubleCol]
        corrWithTable = table2.correlationsWith "a"
        namesCol = corrWithTable.columnAt 0
        corrCol = corrWithTable.columnAt 1
        assertEqual "corrWith name" corrCol.name "corr_with_a"
        assertEqual "corrWith result[1]" (corrCol.toList.getAt 1) 1.0
        expected0 = 0.824
        diff = expected0 - corrCol.toList.getAt 0
        assertLE ("corrWith result[0] close to " + expected0.toText) (if diff < 0.0 then -diff else diff) 0.001

    def testIf:
        print "Testing conditionals in LQuery"
        ints = Column.fromList "a" Int64Type  [1, -2, 3, -4, 5]
        table = Table.fromColumns [ints]
        result = table.each v:
            (v.at "a" > 0).switch (v.at "a") (v.at "a" . negate)
        assertEqual "abs-on-if result" result.toList [1, 2, 3, 4, 5]

    def testFeather:
        print "Testing feather forma IO: round-trip"
        ints = Column.fromList "a" MaybeInt64Type  [Just 1, Just -2, Just 3, Nothing, Just 5]
        table = Table.fromColumns [ints]
        FeatherGenerator.writeFile "samples/temp.feather" table
        table2 = FeatherParser.readFile "samples/temp.feather"
        assertEqual "read names" table2.columnNames ["a"]
        assertEqual "read column" (table2.columnAt 0).toList [Just 1, Just -2, Just 3, Nothing, Just 5]

    def testSort:
        print "Testing sort"
        ints = Column.fromList "a" MaybeInt64Type  [Just 1, Just -2, Just 3, Nothing, Just 5]
        table = Table.fromColumns [ints]
        tableSorted1 = table.sortByColumn [(table.columnAt 0, Ascending, NullsAfter)]
        assertEqual "sort asc after" (tableSorted1.columnAt 0 . toList) [Just -2, Just 1, Just 3, Just 5, Nothing]
        tableSorted2 = table.sortByColumn [(table.columnAt 0, Ascending, NullsBefore)]
        assertEqual "sort asc before" (tableSorted2.columnAt 0 . toList) [Nothing, Just -2, Just 1, Just 3, Just 5]
        tableSorted3 = table.sortByColumn [(table.columnAt 0, Descending, NullsAfter)]
        assertEqual "sort desc after" (tableSorted3.columnAt 0 . toList) [Just 5, Just 3, Just 1, Just -2, Nothing]
        tableSorted4 = table.sortByColumn [(table.columnAt 0, Descending, NullsBefore)]
        assertEqual "sort desc before" (tableSorted4.columnAt 0 . toList) [Nothing, Just 5, Just 3, Just 1, Just -2]

        tableSorted5 = table.sortMultiples [("a", Descending, NullsBefore)]
        assertEqual "sort name desc before" (tableSorted5.column "a" . toList) [Nothing, Just 5, Just 3, Just 1, Just -2]

    def testInterpolate:
        print "Testing interpolate"
        intsCol = Column.fromList "a" MaybeInt64Type [Nothing, Just 5, Nothing, Nothing, Just 11, Nothing]
        expectedInts = [5, 5, 7, 9, 11, 11]
        assertEqual "interpolate int column" intsCol.interpolate.toList expectedInts
        doublesCol = Column.fromList "a" MaybeDoubleType [Nothing, Just 2.0, Nothing, Nothing, Nothing, Just 3.0, Nothing]
        expectedDoubles = [2.0, 2.0, 2.25, 2.5, 2.75, 3.0, 3.0]
        table = Table.fromColumns [intsCol, doublesCol]
        tableInterpolated = table.interpolate
        assertEqual "interpolate table: ints" (tableInterpolated.columnAt 0 . toList) expectedInts
        assertEqual "interpolate table: doubles" (tableInterpolated.columnAt 1 . toList) expectedDoubles

    def testShift:
        intCol = Column.fromList "a" MaybeStringType [Just "first", Nothing, Just "last"]
        assertEqual "shift -1" (intCol.shift -1 . toList) [Nothing, Just "last", Nothing]
        assertEqual "shift 0" (intCol.shift 0 . toList) [Just "first", Nothing, Just "last"]
        assertEqual "shift 1" (intCol.shift 1 . toList) [Nothing, Just "first", Nothing]
        assertEqual "shift 2" (intCol.shift 2 . toList) [Nothing, Nothing, Just "first"]
        assertEqual "shift 3" (intCol.shift 3 . toList) [Nothing, Nothing, Nothing]

    def testAutoCorr:
        intCol = Column.fromList "a" Int64Type [5, 8, 3, 1, 5, 2, 8, 7]
        assertNoThrow "no throw" $ intCol.autoCorr 1

    def testAggregateBy:
        print "Testing aggregateBy"
        idCol = Column.fromList "id" MaybeInt64Type [Nothing, Just 1, Just 2, Just 1, Nothing, Just 5, Just 2, Just 2, Just 4 ]
        intCol = Column.fromList "a" MaybeInt64Type [Just 5 , Just 8, Just 3, Just 1, Just 5 , Just 2, Just 8, Just 7, Nothing]
        table = Table.fromColumns [idCol, intCol]
        tableAggregated = table.aggregateBy "id" [("a", [Minimum, Maximum, Mean, Length, Median, First, Last])]
        assertEqual "id" (tableAggregated.column "id" . toList) [Nothing, Just 1, Just 2, Just 5, Just 4]
        assertEqual "min" (tableAggregated.column "a_min" . toList) [Just 5.0, Just 1.0, Just 3.0, Just 2.0, Nothing]
        assertEqual "max" (tableAggregated.column "a_max" . toList) [Just 5.0, Just 8.0, Just 8.0, Just 2.0, Nothing]
        assertEqual "mean" (tableAggregated.column "a_mean" . toList) [Just 5.0, Just 4.5, Just 6.0, Just 2.0, Nothing]
        assertEqual "length" (tableAggregated.column "a_length" . toList) [2.0, 2.0, 3.0, 1.0, 1.0]
        assertEqual "median" (tableAggregated.column "a_median" . toList) [Just 5.0, Just 4.5, Just 7.0, Just 2.0, Nothing]
        assertEqual "first" (tableAggregated.column "a_first" . toList) [Just 5.0, Just 8.0, Just 3.0, Just 2.0, Nothing]
        assertEqual "last" (tableAggregated.column "a_last" . toList) [Just 5.0, Just 1.0, Just 7.0, Just 2.0, Nothing]

    def testRolling:
        print "Testing rolling"
        times = ["2013-01-01 09:00:00", "2013-01-01 09:00:02", "2013-01-01 09:00:03", "2013-01-01 09:00:05", "2013-01-01 09:00:06"].each (Time.parseFmt "%F %T")
        timesCol = Column.fromList "time" TimestampType times
        numsCol = Column.fromList "val" MaybeDoubleType [Just 0.0, Just 1.0, Just 2.0, Nothing, Just 4.0]
        table = Table.fromColumns [timesCol, numsCol]
        assertThrow "wrong key column" (table.rollingIntervalMultiple "val" 2.seconds [("val", [Sum])])
        tableResult = table.rollingIntervalMultiple "time" 2.seconds [("val", [Sum])]
        assertEqual "result column count" tableResult.columnCount 2
        assertEqual "result column 0" (tableResult.columnAt 0 . toList) times
        assertEqual "result column 1" (tableResult.columnAt 1 . toList) [0.0, 1.0, 3.0, 0.0, 4.0]

    def run:
        self.testRolling
        self.testAggregateBy
        self.testAutoCorr
        self.testShift
        self.testInterpolate
        self.testSort
        self.testFeather
        self.testIf
        self.testStats
        self.testCountValues
        self.testFilling
        self.testDropping
        self.testMapping
        self.testFiltering
        self.testIO
        self.testSchema
        self.testColumn
        self.testField
        self.testDatatype
        self.testChunkedArray
        self.testSlicing
        self.testDoubleBuilder
        self.testListArrayRoundTrip
        self.testMaybeStringBuilder
        self.testInt64Builder
        self.testMaybeInt64Builder
        self.testTimestampBuilder
        self.testMaybeTimestampBuilder
